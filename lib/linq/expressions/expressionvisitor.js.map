{"version":3,"file":"expressionvisitor.js","sourceRoot":"","sources":["../../../src/linq/expressions/expressionvisitor.ts"],"names":[],"mappings":"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","sourcesContent":["import * as jsep  from 'jsep';\r\n\r\nimport { IExpression, Expression, ExpressionType } from './expression';\r\nimport { ILiteralExpression, LiteralExpression } from './literalexpression';\r\nimport { ICompoundExpression } from './compoundexpression';\r\nimport { IIdentifierExpression, IdentifierExpression } from './identifierexpression';\r\nimport { IMemberExpression, MemberExpression } from './memberexpression';\r\nimport { IMethodExpression, MethodExpression } from './methodexpression';\r\nimport { IUnaryExpression, UnaryExpression, UnaryOperatorType, UnaryAffixType } from './unaryexpression';\r\nimport { IBinaryExpression, BinaryExpression, BinaryOperatorType } from './binaryexpression';\r\nimport { ILogicalExpression, LogicalExpression, LogicalOperatorType } from './logicalexpression';\r\nimport { IConditionalExpression } from './conditionalexpression';\r\nimport { IArrayExpression, ArrayExpression } from './arrayexpression';\r\n\r\nimport { LambdaExpression } from './lambdaexpression';\r\n\r\nexport class ExpressionVisitor {\r\n    protected _lambdaExpression: LambdaExpression;\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    public visitLambda(predicate: (it: Object, ...param: Array<any>) => any): IExpression {\r\n        var expression = (this._lambdaExpression = new LambdaExpression(predicate)).expression;\r\n\r\n        if (expression) {\r\n            try {\r\n                return this.visit(this.transform(jsep(expression)));\r\n            }\r\n            catch (ex) {\r\n                throw new Error(ex.message);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public visit(expression: IExpression): IExpression {\r\n        return expression.accept(this);\r\n    }\r\n\r\n    public visitLiteral(expression: ILiteralExpression): IExpression {\r\n        switch (typeof expression.value) {\r\n            case 'string':\r\n\r\n                break;\r\n\r\n            case 'number':\r\n\r\n                break;\r\n        }\r\n\r\n        return expression;\r\n    }\r\n\r\n    public visitArray(expression: IArrayExpression): IExpression {\r\n        expression.elements = expression.elements.map((element) => element.accept(this));\r\n\r\n        return expression;\r\n    }\r\n\r\n    public visitCompound(expression: ICompoundExpression): IExpression {\r\n        expression.body = expression.body.map((expr) => expr.accept(this));\r\n\r\n        return expression;\r\n    }\r\n\r\n    public visitIdentifier(expression: IIdentifierExpression): IExpression {\r\n        return expression;\r\n    }\r\n\r\n    public visitBinary(expression: IBinaryExpression): IExpression {\r\n        expression.left = expression.left.accept(this);\r\n        expression.right = expression.right.accept(this);\r\n\r\n        return expression;\r\n    }\r\n\r\n\r\n    public visitMethod(expression: IMethodExpression): IExpression {\r\n        expression.caller = expression.caller.accept(this);\r\n        expression.parameters = expression.parameters.map((arg) => arg.accept(this));\r\n\r\n        return expression;\r\n    }\r\n\r\n\r\n    public visitUnary(expression: IUnaryExpression): IExpression {\r\n        expression.argument = expression.argument.accept(this);\r\n\r\n        return expression;\r\n    }\r\n\r\n    public visitMember(expression: IMemberExpression): IExpression {\r\n        expression.object = expression.object.accept(this);\r\n        expression.property = expression.property.accept(this);\r\n\r\n        return expression;\r\n    }\r\n\r\n    public visitLogical(expression: ILogicalExpression): IExpression {\r\n        expression.left = expression.left.accept(this);\r\n        expression.right = expression.right.accept(this);\r\n\r\n        return expression;\r\n    }\r\n\r\n    public visitConditional(expression: IConditionalExpression): IExpression {\r\n        expression.condition = expression.condition.accept(this);\r\n        expression.success = expression.success.accept(this);\r\n        expression.failure = expression.failure.accept(this);\r\n\r\n        return expression;\r\n\r\n    }\r\n\r\n    /**\r\n     * transforming jsep expression ast tree to our internal ast tree to make it easier to swap expression parser at a later time\r\n     * @param expression jsep expression object\r\n     */\r\n    private transform(expression: any): IExpression {\r\n        var child: IExpression;\r\n\r\n        switch (expression.type) {\r\n            case 'Compound':\r\n                return Object.create(Expression, <PropertyDescriptorMap><Object><ICompoundExpression>{\r\n                    type: ExpressionType.Compound,\r\n                    body: expression.body ? expression.body.map((expr) => this.transform(expr)) : []\r\n                });\r\n\r\n            case 'Identifier':\r\n                return new IdentifierExpression(expression.name);\r\n\r\n            case 'ThisExpression':\r\n                return new IdentifierExpression('this');\r\n\r\n            case 'MemberExpression':\r\n                child = this.transform(expression.object);\r\n                if (child.type == ExpressionType.Member)\r\n                    return new MemberExpression((<IMemberExpression>child).object, new MemberExpression((<IMemberExpression>child).property, (expression.computed == true ? new ArrayExpression([this.transform(expression.property)]) : this.transform(expression.property)))); // this.ar[5] should be member 'this' with property member 'ar' with property [5].\r\n                else\r\n                    return new MemberExpression(child, this.transform(expression.property));\r\n\r\n            case 'Literal':\r\n                return new LiteralExpression(expression.value);\r\n\r\n            case 'CallExpression':\r\n                switch (expression.callee.type) {\r\n                    case 'MemberExpression':\r\n                        return new MethodExpression(expression.callee.property.name, expression.arguments ? expression.arguments.map((arg) => this.transform(arg)) : [], this.transform(expression.callee.object));\r\n\r\n                    default:\r\n                        throw new Error('Caller of method expression is not a MemberExpression, but is ' + expression.callee.type);\r\n                }\r\n\r\n            case 'UnaryExpression':\r\n                var operatorTypeUnary: UnaryOperatorType;\r\n                switch (expression.operator) {\r\n                    case '!':\r\n                        return new UnaryExpression(UnaryOperatorType.Invert, expression.prefix === true ? UnaryAffixType.Prefix : UnaryAffixType.Postfix, this.transform(expression.argument));\r\n                    case '~':\r\n                        return new UnaryExpression(UnaryOperatorType.Complement, expression.prefix === true ? UnaryAffixType.Prefix : UnaryAffixType.Postfix, this.transform(expression.argument));\r\n                    case '+':\r\n                    case '++':\r\n                        if (expression.argument == false) {\r\n                            return new UnaryExpression(UnaryOperatorType.Negative, expression.prefix === true ? UnaryAffixType.Prefix : UnaryAffixType.Postfix, null);\r\n                        }\r\n                        else {\r\n                            child = this.transform(expression.argument);\r\n                            if (child.type == ExpressionType.Unary)\r\n                                return new UnaryExpression(UnaryOperatorType.Increment, expression.prefix === true ? UnaryAffixType.Prefix : UnaryAffixType.Postfix, (<IUnaryExpression>child).argument)\r\n                            else\r\n                                return new UnaryExpression(UnaryOperatorType.Positive, expression.prefix === true ? UnaryAffixType.Prefix : UnaryAffixType.Postfix, this.transform(expression.argument));\r\n                        }\r\n                    case '-':\r\n                    case '--':\r\n                        if (expression.argument == false) {\r\n                            return new UnaryExpression(UnaryOperatorType.Negative, expression.prefix === true ? UnaryAffixType.Prefix : UnaryAffixType.Postfix, null);\r\n                        }\r\n                        else {\r\n                            child = this.transform(expression.argument);\r\n                            if (child.type == ExpressionType.Unary)\r\n                                return new UnaryExpression(UnaryOperatorType.Decrement, expression.prefix === true ? UnaryAffixType.Prefix : UnaryAffixType.Postfix, (<IUnaryExpression>child).argument)\r\n                            else\r\n                                return new UnaryExpression(UnaryOperatorType.Negative, expression.prefix === true ? UnaryAffixType.Prefix : UnaryAffixType.Postfix, this.transform(expression.argument));\r\n                        }\r\n                    default:\r\n                        throw new Error('Operator \"' + expression.operator + '\" is unknown for ' + expression.type);\r\n                }\r\n\r\n            case 'LogicalExpression':\r\n            case 'BinaryExpression':\r\n                switch (expression.operator) {\r\n                    case '|':\r\n                        return new BinaryExpression(BinaryOperatorType.Or, this.transform(expression.left), this.transform(expression.right));\r\n                    case '^':\r\n                        return new BinaryExpression(BinaryOperatorType.ExclusiveOr, this.transform(expression.left), this.transform(expression.right));\r\n                    case '&':\r\n                        return new BinaryExpression(BinaryOperatorType.And, this.transform(expression.left), this.transform(expression.right));\r\n                    case '<<':\r\n                        return new BinaryExpression(BinaryOperatorType.LeftShift, this.transform(expression.left), this.transform(expression.right));\r\n                    case '>>':\r\n                        return new BinaryExpression(BinaryOperatorType.RightShift, this.transform(expression.left), this.transform(expression.right));\r\n                    case '>>>': // zero-fill right-shift \r\n                        return new BinaryExpression(BinaryOperatorType.RightShift, this.transform(expression.left), this.transform(expression.right));\r\n                    case '+':\r\n                        child = this.transform(expression.right); // 5++ is handled as binary expression with right side a unaryexpression with empty argument\r\n                        if (child.type == ExpressionType.Unary && (<IUnaryExpression>child).argument == null)\r\n                            if ((child = this.transform(expression.left)).type == ExpressionType.Binary) // 5+a++ is handled with wrong precedence (5+a)+(+), this will fix it\r\n                                return new BinaryExpression((<IBinaryExpression>child).operator, (<IBinaryExpression>child).left, new UnaryExpression(UnaryOperatorType.Increment, UnaryAffixType.Postfix, (<IBinaryExpression>child).right));\r\n                            else\r\n                                return new UnaryExpression(UnaryOperatorType.Increment, UnaryAffixType.Postfix, this.transform(expression.left))\r\n                        else\r\n                            return new BinaryExpression(BinaryOperatorType.Addition, this.transform(expression.left), child);\r\n                    case '-':\r\n                        child = this.transform(expression.right); // 5-- is handled as binary expression (5)-(-) with right side a unaryexpression with empty argument\r\n                        if (child.type == ExpressionType.Unary && (<IUnaryExpression>child).argument == null)\r\n                            if ((child = this.transform(expression.left)).type == ExpressionType.Binary) // 5-a++ is handled with wrong precedence (5-a)+(+), this will fix it\r\n                                return new BinaryExpression((<IBinaryExpression>child).operator, (<IBinaryExpression>child).left, new UnaryExpression(UnaryOperatorType.Decrement, UnaryAffixType.Postfix, (<IBinaryExpression>child).right));\r\n                            else\r\n                                return new UnaryExpression(UnaryOperatorType.Decrement, UnaryAffixType.Postfix, this.transform(expression.left))\r\n                        else\r\n                            return new BinaryExpression(BinaryOperatorType.Subtraction, this.transform(expression.left), child);\r\n                    case '*':\r\n                        return new BinaryExpression(BinaryOperatorType.Multiplication, this.transform(expression.left), this.transform(expression.right));\r\n                    case '/':\r\n                        return new BinaryExpression(BinaryOperatorType.Division, this.transform(expression.left), this.transform(expression.right));\r\n                    case '%':\r\n                        return new BinaryExpression(BinaryOperatorType.Modulus, this.transform(expression.left), this.transform(expression.right));\r\n                    case '==':\r\n                        return new LogicalExpression(LogicalOperatorType.Equal, this.transform(expression.left), this.transform(expression.right));\r\n                    case '!=':\r\n                        return new LogicalExpression(LogicalOperatorType.NotEqual, this.transform(expression.left), this.transform(expression.right));\r\n                    case '===':\r\n                        return new LogicalExpression(LogicalOperatorType.Equal, this.transform(expression.left), this.transform(expression.right));\r\n                    case '!==':\r\n                        return new LogicalExpression(LogicalOperatorType.NotEqual, this.transform(expression.left), this.transform(expression.right));\r\n                    case '<':\r\n                        return new LogicalExpression(LogicalOperatorType.Lesser, this.transform(expression.left), this.transform(expression.right));\r\n                    case '>':\r\n                        return new LogicalExpression(LogicalOperatorType.Greater, this.transform(expression.left), this.transform(expression.right));\r\n                    case '<=':\r\n                        return new LogicalExpression(LogicalOperatorType.LesserOrEqual, this.transform(expression.left), this.transform(expression.right));\r\n                    case '>=':\r\n                        return new LogicalExpression(LogicalOperatorType.GreaterOrEqual, this.transform(expression.left), this.transform(expression.right));\r\n                    case '||':\r\n                        return new LogicalExpression(LogicalOperatorType.Or, this.transform(expression.left), this.transform(expression.right));\r\n                    case '&&':\r\n                        return new LogicalExpression(LogicalOperatorType.And, this.transform(expression.left), this.transform(expression.right));\r\n                    default:\r\n                        throw new Error('Operator \"' + expression.operator + '\" is unknown for ' + expression.type);\r\n                }\r\n\r\n            case 'ConditionalExpression':\r\n                return <Expression><IExpression><IConditionalExpression>{\r\n                    type: ExpressionType.Conditional,\r\n                    condition: this.transform(expression.test),\r\n                    success: this.transform(expression.consequent),\r\n                    failure: this.transform(expression.alternate)\r\n                };\r\n\r\n            case 'ArrayExpression':\r\n                return <Expression><IExpression><IArrayExpression>{\r\n                    type: ExpressionType.Array,\r\n                    elements: expression.elements ? expression.elements.map((arg) => this.transform(arg)) : []\r\n                };\r\n\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n}\r\n\r\n//export { IExpression, Expression, ExpressionType } from './expression';\r\n//export { IArrayExpression, IBinaryExpression, ICompoundExpression, IConditionalExpression, IIdentifierExpression, ILiteralExpression, ILogicalExpression, IMemberExpression, IMethodExpression, IUnaryExpression }\r\n\r\nexport { IExpression, Expression, ExpressionType } from './expression';\r\nexport { ILiteralExpression, LiteralExpression } from './literalexpression';\r\nexport { ICompoundExpression } from './compoundexpression';\r\nexport { IIdentifierExpression, IdentifierExpression } from './identifierexpression';\r\nexport { IMemberExpression, MemberExpression } from './memberexpression';\r\nexport { IMethodExpression, MethodExpression } from './methodexpression';\r\nexport { IUnaryExpression, UnaryExpression, UnaryOperatorType, UnaryAffixType } from './unaryexpression';\r\nexport { IBinaryExpression, BinaryExpression, BinaryOperatorType } from './binaryexpression';\r\nexport { ILogicalExpression, LogicalExpression, LogicalOperatorType } from './logicalexpression';\r\nexport { IConditionalExpression } from './conditionalexpression';\r\nexport { IArrayExpression, ArrayExpression } from './arrayexpression';"]}