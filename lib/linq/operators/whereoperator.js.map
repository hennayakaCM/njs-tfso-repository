{"version":3,"file":"whereoperator.js","sourceRoot":"","sources":["../../../src/linq/operators/whereoperator.ts"],"names":[],"mappings":";AAAA,yCAAoD;AAEpD,mBAAoC,SAAQ,mBAAiB;IAGzD,YAAmB,SAAoD,EAAE,GAAG,UAAiB;QACzF,KAAK,CAAC,uBAAY,CAAC,KAAK,CAAC,CAAC;QADX,cAAS,GAAT,SAAS,CAA2C;QAGnE,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;IAClC,CAAC;IAED,IAAW,UAAU;QACjB,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;IAC5B,CAAC;IAEM,QAAQ,CAAC,KAAgB;QAC5B,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM;YACtB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE,EAAE,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;QACtE,CAAC,CAAC,CAAA;IACN,CAAC;CACJ;AAlBD,sCAkBC","sourcesContent":["import { Operator, OperatorType } from './operator';\r\n\r\nexport class WhereOperator<TEntity> extends Operator<TEntity> {\r\n    private _parameters: Array<any>;\r\n\r\n    constructor(public predicate: (it: TEntity, ...param: any[]) => boolean, ...parameters: any[]) {\r\n        super(OperatorType.Where);\r\n\r\n        this._parameters = parameters;\r\n    }\r\n\r\n    public get parameters(): any[] {\r\n        return this._parameters;\r\n    }\r\n\r\n    public evaluate(items: TEntity[]): TEntity[] {\r\n        return items.filter(entity => {\r\n            return this.predicate.apply({}, [entity].concat(this.parameters));\r\n        })\r\n    }\r\n}"]}