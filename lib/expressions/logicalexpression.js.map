{"version":3,"file":"logicalexpression.js","sourceRoot":"","sources":["../../src/expressions/logicalexpression.ts"],"names":[],"mappings":";AAAA,6BAAwD,cAAc,CAAC,CAAA;AAEvE,WAAY,mBAAmB;IAC3B,2DAAG,CAAA;IACH,yDAAE,CAAA;IACF,qEAAQ,CAAA;IACR,+EAAa,CAAA;IACb,iFAAc,CAAA;IACd,iEAAM,CAAA;IACN,mEAAO,CAAA;IACP,+DAAK,CAAA,CAAW,KAAK;AACzB,CAAC,EATW,2BAAmB,KAAnB,2BAAmB,QAS9B;AATD,IAAY,mBAAmB,GAAnB,2BASX,CAAA;AAQD,gCAAuC,uBAAU;IAC7C,YAAmB,QAA6B,EAAS,IAAiB,EAAS,KAAkB;QACjG,MAAM,2BAAc,CAAC,OAAO,CAAC,CAAC;QADf,aAAQ,GAAR,QAAQ,CAAqB;QAAS,SAAI,GAAJ,IAAI,CAAa;QAAS,UAAK,GAAL,KAAK,CAAa;IAErG,CAAC;AACL,CAAC;AAJY,yBAAiB,oBAI7B,CAAA","sourcesContent":["import { IExpression, Expression, ExpressionType } from './expression';\r\n\r\nexport enum LogicalOperatorType {\r\n    And,            // &&\r\n    Or,             // ||\r\n    NotEqual,       // !=\r\n    LesserOrEqual,  // <=\r\n    GreaterOrEqual, // >=\r\n    Lesser,         // <\r\n    Greater,        // >\r\n    Equal           // ==\r\n}\r\n\r\nexport interface ILogicalExpression extends IExpression {\r\n    operator: LogicalOperatorType\r\n    left: IExpression\r\n    right: IExpression\r\n}\r\n\r\nexport class LogicalExpression extends Expression implements ILogicalExpression {\r\n    constructor(public operator: LogicalOperatorType, public left: IExpression, public right: IExpression) {\r\n        super(ExpressionType.Logical);\r\n    }\r\n}"]}