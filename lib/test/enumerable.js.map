{"version":3,"file":"enumerable.js","sourceRoot":"","sources":["../../src/test/enumerable.ts"],"names":[],"mappings":"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","sourcesContent":["import * as assert from 'assert';\r\nimport Enumerable, { IEnumerable } from './../linq/enumerable';\r\n\r\ninterface ICar {\r\n\r\n    id: number\r\n    location: string\r\n\r\n    registrationYear: number\r\n}\r\n\r\ndescribe(\"When using Enumerable\", () => {\r\n    var list: Array<ICar>;\r\n\r\n    beforeEach(() => {\r\n        list = [\r\n            <ICar>{ id: 1, location: 'SKIEN', registrationYear: 2016 },\r\n            <ICar>{ id: 2, location: 'PORSGRUNN', registrationYear: 2010 },\r\n            <ICar>{ id: 3, location: 'PORSGRUNN', registrationYear: 2005 },\r\n            <ICar>{ id: 4, location: 'LANGESUND', registrationYear: 2004 },\r\n            <ICar>{ id: 5, location: 'BREVIK', registrationYear: 2009 },\r\n            <ICar>{ id: 6, location: 'BREVIK', registrationYear: 2014 },\r\n            <ICar>{ id: 7, location: 'HEISTAD', registrationYear: 2013 },\r\n            <ICar>{ id: 8, location: 'LARVIK', registrationYear: 2009 }\r\n        ];        \r\n    })\r\n\r\n    it(\"should take top 1\", () => {\r\n        var ar = new Enumerable(list).take(1).toArray();\r\n\r\n        assert.ok(ar.length == 1);\r\n    });\r\n\r\n    it(\"should skip 5\", () => {\r\n        var ar = new Enumerable(list).skip(5).toArray();\r\n\r\n        assert.ok(ar[0].id == 6);\r\n    });\r\n\r\n    it(\"should skip 5 and take 3\", () => {\r\n        var ar = new Enumerable(list).skip(5).take(3).toArray();\r\n\r\n        assert.ok(ar.length == 3);\r\n        assert.ok(ar[0].id == 6);\r\n    });\r\n\r\n    it(\"should order by a property\", () => {\r\n        var ar = new Enumerable(list).orderBy(it => it.location).toArray();\r\n        \r\n        assert.deepEqual(ar.map(item => item.location), [\"BREVIK\", \"BREVIK\", \"HEISTAD\", \"LANGESUND\", \"LARVIK\", \"PORSGRUNN\", \"PORSGRUNN\", \"SKIEN\"]);\r\n    })\r\n\r\n    it(\"should be able to iterate\", () => {\r\n        var ar = new Enumerable(list).take(3);\r\n\r\n        assert.equal(Array.from(ar).length, 3);\r\n    })\r\n\r\n    it(\"should just work\", () => {\r\n        let query: IEnumerable<ICar> = new Enumerable<ICar>();\r\n\r\n        query.skip(5)\r\n        query.take(3);\r\n        \r\n        var ar = query.toArray(list);\r\n\r\n        assert.ok(ar.length == 3);\r\n        assert.ok(ar[0].id == 6);\r\n    })\r\n\r\n    it(\"should iterate through operations\", () => {\r\n        let query: IEnumerable<ICar> = new Enumerable<ICar>();\r\n\r\n        query.skip(5);\r\n        query.take(3);\r\n\r\n        var operations = (<Enumerable<ICar>>query).operations.values();\r\n\r\n        var count = 0;\r\n        for (let operator of operations) {\r\n            if (operator) {\r\n                count++;\r\n            }\r\n        }\r\n\r\n        assert.equal(count, 2);\r\n    })\r\n});\r\n"]}