{"version":3,"file":"expressionvisitor_binary_expression.js","sourceRoot":"","sources":["../../src/test/expressionvisitor_binary_expression.ts"],"names":[],"mappings":"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","sourcesContent":["import * as assert from 'assert';\r\nimport * as Expr from './../expressions/expressionvisitor';\r\n\r\ndescribe(\"When using ExpressionVisitor for binary Lambda Expression\", () => {\r\n    var visitor: Expr.ExpressionVisitor,\r\n        expr: Expr.IExpression;\r\n\r\n\r\n    beforeEach(() => {\r\n        visitor = new Expr.ExpressionVisitor;\r\n    })\r\n\r\n    it(\"it should return a binary operation\", () => {\r\n        expr = visitor.visitLambda(() => 5 + 2);\r\n\r\n        console.log(expr.toString());\r\n\r\n        assert.ok(expr.type == Expr.ExpressionType.Binary, \"Expected a BinaryExpression\");\r\n        assert.ok((<Expr.IBinaryExpression>expr).left.type == Expr.ExpressionType.Literal, \"Expected a literal at left side\");\r\n        assert.ok((<Expr.IBinaryExpression>expr).right.type == Expr.ExpressionType.Literal, \"Expected a lteral at right side\");\r\n        assert.ok((<Expr.ILiteralExpression>(<Expr.IBinaryExpression>expr).left).value == 5, \"Expected number 5 at left side\");\r\n        assert.ok((<Expr.ILiteralExpression>(<Expr.IBinaryExpression>expr).right).value == 2, \"Expected number 5 at right side\");\r\n    });\r\n\r\n    it(\"it should handle binary operation for addition\", () => {\r\n        expr = visitor.visitLambda(() => 5 + 2);\r\n\r\n        assert.ok(expr.type == Expr.ExpressionType.Binary, \"Expected a BinaryExpression\");\r\n        assert.ok((<Expr.IBinaryExpression>expr).operator == Expr.BinaryOperatorType.Addition, \"Expected a binary operation of addition\");\r\n    });\r\n\r\n    it(\"it should handle binary operation for addition for negative number\", () => {\r\n        expr = visitor.visitLambda(() => 5 + -2);\r\n\r\n        assert.ok(expr.type == Expr.ExpressionType.Binary, \"Expected a BinaryExpression\");\r\n        assert.ok((<Expr.IBinaryExpression>expr).operator == Expr.BinaryOperatorType.Addition, \"Expected a binary operation of addition\");\r\n        assert.ok((<Expr.IBinaryExpression>expr).right.type == Expr.ExpressionType.Unary, \"Expected a unary expression at right side of addition\");\r\n    });\r\n\r\n    it(\"it should handle binary operation for addition for positive number\", () => {\r\n        expr = visitor.visitLambda(() => 5 + +2);\r\n\r\n        assert.ok(expr.type == Expr.ExpressionType.Binary, \"Expected a BinaryExpression\");\r\n        assert.ok((<Expr.IBinaryExpression>expr).operator == Expr.BinaryOperatorType.Addition, \"Expected a binary operation of addition\");\r\n        assert.ok((<Expr.IBinaryExpression>expr).right.type == Expr.ExpressionType.Unary, \"Expected a unary expression at right side of addition\");\r\n    });\r\n\r\n    it(\"it should handle binary operation for subtraction\", () => {\r\n        expr = visitor.visitLambda(() => 5 - 2);\r\n\r\n        assert.ok(expr.type == Expr.ExpressionType.Binary, \"Expected a BinaryExpression\");\r\n        assert.ok((<Expr.IBinaryExpression>expr).operator == Expr.BinaryOperatorType.Subtraction, \"Expected a binary operation of subtraction\");\r\n    });\r\n\r\n    it(\"it should handle binary operation for subtraction for negative number\", () => {\r\n        expr = visitor.visitLambda(() => 5 - -2);\r\n\r\n        assert.ok(expr.type == Expr.ExpressionType.Binary, \"Expected a BinaryExpression\");\r\n        assert.ok((<Expr.IBinaryExpression>expr).operator == Expr.BinaryOperatorType.Subtraction, \"Expected a binary operation of subtraction\");\r\n        assert.ok((<Expr.IBinaryExpression>expr).right.type == Expr.ExpressionType.Unary, \"Expected a unary expression at right side of substraction\");\r\n    });\r\n\r\n    it(\"it should handle binary operation for subtraction for positive number\", () => {\r\n        expr = visitor.visitLambda(() => 5 - +2);\r\n\r\n        assert.ok(expr.type == Expr.ExpressionType.Binary, \"Expected a BinaryExpression\");\r\n        assert.ok((<Expr.IBinaryExpression>expr).operator == Expr.BinaryOperatorType.Subtraction, \"Expected a binary operation of subtraction\");\r\n        assert.ok((<Expr.IBinaryExpression>expr).right.type == Expr.ExpressionType.Unary, \"Expected a unary expression at right side of substraction\");\r\n    });\r\n\r\n    it(\"it should handle binary operation for multiplication\", () => {\r\n        expr = visitor.visitLambda(() => 5 * 2);\r\n\r\n        assert.ok(expr.type == Expr.ExpressionType.Binary, \"Expected a BinaryExpression\");\r\n        assert.ok((<Expr.IBinaryExpression>expr).operator == Expr.BinaryOperatorType.Multiplication, \"Expected a binary operation of multiplication\");\r\n    });\r\n\r\n    it(\"it should handle binary operation for division\", () => {\r\n        expr = visitor.visitLambda(() => 5 / 2);\r\n\r\n        assert.ok(expr.type == Expr.ExpressionType.Binary, \"Expected a BinaryExpression\");\r\n        assert.ok((<Expr.IBinaryExpression>expr).operator == Expr.BinaryOperatorType.Division, \"Expected a binary operation of division\");\r\n    });\r\n\r\n    it(\"it should handle binary operation for modulus\", () => {\r\n        expr = visitor.visitLambda(() => 5 % 2);\r\n\r\n        assert.ok(expr.type == Expr.ExpressionType.Binary, \"Expected a BinaryExpression\");\r\n        assert.ok((<Expr.IBinaryExpression>expr).operator == Expr.BinaryOperatorType.Modulus, \"Expected a binary operation of modulus\");\r\n    });\r\n\r\n    it(\"it should handle binary operation for and\", () => {\r\n        expr = visitor.visitLambda(() => 5 & 2);\r\n\r\n        assert.ok(expr.type == Expr.ExpressionType.Binary, \"Expected a BinaryExpression\");\r\n        assert.ok((<Expr.IBinaryExpression>expr).operator == Expr.BinaryOperatorType.And, \"Expected a binary operation of and\");\r\n    });\r\n\r\n    it(\"it should handle binary operation for or\", () => {\r\n        expr = visitor.visitLambda(() => 5 | 2);\r\n\r\n        assert.ok(expr.type == Expr.ExpressionType.Binary, \"Expected a BinaryExpression\");\r\n        assert.ok((<Expr.IBinaryExpression>expr).operator == Expr.BinaryOperatorType.Or, \"Expected a binary operation of or\");\r\n    });\r\n\r\n    it(\"it should handle binary operation for left shift\", () => {\r\n        expr = visitor.visitLambda(() => 5 << 2);\r\n\r\n        assert.ok(expr.type == Expr.ExpressionType.Binary, \"Expected a BinaryExpression\");\r\n        assert.ok((<Expr.IBinaryExpression>expr).operator == Expr.BinaryOperatorType.LeftShift, \"Expected a binary operation of left shift\");\r\n    });\r\n\r\n    it(\"it should handle binary operation for right shift\", () => {\r\n        expr = visitor.visitLambda(() => 5 >> 2);\r\n\r\n        assert.ok(expr.type == Expr.ExpressionType.Binary, \"Expected a BinaryExpression\");\r\n        assert.ok((<Expr.IBinaryExpression>expr).operator == Expr.BinaryOperatorType.RightShift, \"Expected a binary operation of right shift\");\r\n    });\r\n\r\n    it(\"it should handle binary operation for zero-fill right shift\", () => {\r\n        expr = visitor.visitLambda(() => 5 >>> 2);\r\n\r\n        assert.ok(expr.type == Expr.ExpressionType.Binary, \"Expected a BinaryExpression\");\r\n        assert.ok((<Expr.IBinaryExpression>expr).operator == Expr.BinaryOperatorType.RightShift, \"Expected a binary operation of right shift\");\r\n    });\r\n\r\n    it(\"it should handle binary operation for exlusive or\", () => {\r\n        expr = visitor.visitLambda(() => 5 ^ 2);\r\n\r\n        assert.ok(expr.type == Expr.ExpressionType.Binary, \"Expected a BinaryExpression\");\r\n        assert.ok((<Expr.IBinaryExpression>expr).operator == Expr.BinaryOperatorType.ExclusiveOr, \"Expected a binary operation of exclusive or\");\r\n    });\r\n});\r\n"]}