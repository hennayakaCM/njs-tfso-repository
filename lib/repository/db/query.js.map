{"version":3,"file":"query.js","sourceRoot":"","sources":["../../../src/repository/db/query.ts"],"names":[],"mappings":"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","sourcesContent":["import { IRecordSet } from './recordset';\r\nimport Enumerable, { IEnumerable } from './../../linq/enumerable';\r\nimport { WhereOperator } from './../../linq/operators/whereoperator';\r\n\r\nexport interface IInputParameters {\r\n    [name: string]: {\r\n        name: string\r\n        type: any\r\n        value: any\r\n    }\r\n}\r\n\r\nexport abstract class Query<TEntity> implements PromiseLike<IRecordSet<TEntity>> {\r\n\r\n    protected onFulfilled: (value: IRecordSet<TEntity>) => any | PromiseLike<any>;\r\n    protected onRejected: (error: any) => any | PromiseLike<any>;\r\n\r\n    \r\n\r\n    private _parameters: IInputParameters = {};\r\n    private _predicate: (entity: TEntity) => boolean;\r\n    private _predicateFootprint: string;\r\n\r\n    private _query: IEnumerable<TEntity>;\r\n    private _commandText: string;\r\n    private _hasRun: boolean;\r\n\r\n    constructor(query?: IEnumerable<TEntity>)\r\n    {\r\n        this._hasRun = false;\r\n        this.query = query;\r\n    }\r\n\r\n    public get query(): IEnumerable<TEntity> {\r\n        if (this._query == null)\r\n            this._query = new Enumerable<TEntity>();\r\n\r\n        return this._query;\r\n    }\r\n\r\n    public set query(value: IEnumerable<TEntity>) {\r\n        this._query = value;\r\n\r\n        if (value != null) {\r\n            for (let operator of value.operations.values())\r\n                if (operator instanceof WhereOperator) {\r\n                    this._predicateFootprint = new Object((<WhereOperator<TEntity>>operator).predicate).toString();\r\n\r\n                    break;\r\n                }\r\n        }\r\n    }\r\n\r\n    protected abstract input(name: string, value: any): void\r\n    protected abstract input(name: string, type: any, value: any): void\r\n\r\n    protected set commandText(query: string) {\r\n        this._commandText = query;\r\n    }\r\n\r\n    protected get commandText(): string {\r\n        return this._commandText;\r\n    }\r\n\r\n    protected get parameters(): IInputParameters {\r\n        return this._parameters;\r\n    }\r\n    /**\r\n         * Execute the query with the values provided in parameters and commandText and returns\r\n         * a promise as a IRecordset of TEntity\r\n         * @return A promise of the fulfilled IRecordSet<TEntity>\r\n         */\r\n    protected abstract executeQuery(): Promise<IRecordSet<TEntity>>\r\n\r\n    private execute<U>(): Promise<U> {\r\n        var stamped = Date.now();\r\n\r\n        return this.executeQuery()\r\n            .then((recordset) => {\r\n                if (recordset.executionTime > 1000 || (recordset.executionTime == 0 && (Date.now() - stamped) > 1000))\r\n                    console.warn(`[WARNING]: Long running query (${(recordset.executionTime > 0 ? recordset.executionTime : Date.now() - stamped)}ms). Consider narrow down the result length (${recordset.length}pcs)${this._predicateFootprint && this._predicateFootprint.length > 0 ? \" for predicate \" + this._predicateFootprint : \"\"};\\n    ${this.commandText}`);\r\n\r\n                if (!this.onFulfilled)\r\n                    return Promise.resolve(recordset);\r\n\r\n                return this.onFulfilled(recordset);\r\n            }, (err) => {\r\n                if (!this.onRejected)\r\n                    return Promise.reject(err);\r\n\r\n                return this.onRejected(err);\r\n            })\r\n    }\r\n\r\n    public then<U>(onFulfilled?: (value: IRecordSet<TEntity>) => U | PromiseLike<U>, onRejected?: (error: Error) => U | PromiseLike<U>): Promise<U> {\r\n        if (this._hasRun == true)\r\n            throw new Error('Query is not thread safe currently, please dispose Query after use');\r\n\r\n        this._hasRun = true;\r\n\r\n        this.onFulfilled = onFulfilled;\r\n        this.onRejected = onRejected;\r\n\r\n        return this.execute<U>();\r\n    }\r\n\r\n    public catch<U>(onRejected?: (error: Error) => U | PromiseLike<U>): Promise<U> {\r\n        if (this._hasRun == true)\r\n            throw new Error('Query is not thread safe currently, please dispose Query after use');\r\n\r\n        this.onRejected = onRejected;\r\n\r\n        return this.execute<U>()\r\n    }\r\n}\r\n\r\nexport { IRecordSet }"]}