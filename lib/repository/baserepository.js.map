{"version":3,"file":"baserepository.js","sourceRoot":"","sources":["../../src/repository/baserepository.ts"],"names":[],"mappings":";AAAA,wBAAkC,mBAAmB,CAAC,CAAA;AAYtD;IAEI;IAEA,CAAC;IAaM,yCAAgB,GAAvB;QACI,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;IAC7B,CAAC;IAEM,0CAAiB,GAAxB;QACI,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;IAC7B,CAAC;IAEM,4CAAmB,GAA1B;QACI,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;IAC7B,CAAC;IAED;;;;OAIG;IACO,mCAAU,GAApB,UAAqB,SAAmC;QAAE,oBAAoB;aAApB,WAAoB,CAApB,sBAAoB,CAApB,IAAoB;YAApB,mCAAoB;;QAC1E,MAAM,CAAC,KAAI,iBAAO,YAAP,iBAAO,mBAAU,SAAS,GAAK,UAAU,KAAC,CAAC;IAC1D,CAAC;IAEM,uCAAc,GAArB,UAAsB,SAAoD;QAAE,oBAAoB;aAApB,WAAoB,CAApB,sBAAoB,CAApB,IAAoB;YAApB,mCAAoB;;QAC5F,MAAM,CAAC,UAAC,MAAe;YACnB,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE,EAAE,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;QAC5D,CAAC,CAAC;IACN,CAAC;IACL,qBAAC;AAAD,CAAC,AA3CD,IA2CC;AAED;kBAAe,cAAc,CAAA","sourcesContent":["import { IFilters, Filters } from './filters/filters';\r\n\r\nexport interface IBaseRepository<TEntity, TEntityId> {\r\n    create(entity: TEntity): Promise<TEntity>\r\n\r\n    read(id: TEntityId): Promise<TEntity>\r\n    readAll(predicate: any, ...parameters: any[]): Promise<TEntity[]>\r\n\r\n    update(entity: TEntity): Promise<boolean>\r\n    delete(entity: TEntity): Promise<boolean>\r\n}\r\n\r\nabstract class BaseRepository<TEntity, TEntityId> implements IBaseRepository<TEntity, TEntityId>\r\n{\r\n    constructor() {\r\n\r\n    }\r\n\r\n    abstract read(id: TEntityId): Promise<TEntity>\r\n\r\n    // ((t) => t.gender == 'female' && t.age >= 16)({gender: 'female', age: 17})     => true\r\n    // ((t) => t.gender == 'female' && t.age >= 16).toString()                       => (t) => t.gender == \\'female\\' && t.age >= 16\r\n    abstract readAll(predicate: (it: TEntity, ...param: any[]) => boolean, ...parameters: any[]): Promise<TEntity[]>\r\n\r\n    abstract create(entity: TEntity): Promise<TEntity>\r\n    abstract update(entity: TEntity): Promise<boolean>\r\n    abstract delete(entity: TEntity): Promise<boolean>\r\n\r\n\r\n    public beginTransaction(): Promise<void> {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public commitTransaction(): Promise<void> {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public rollbackTransaction(): Promise<void> {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * returns a IFilters if the predicate is solvable, otherwise it throws an error\r\n     * @param predicate\r\n     * @param parameters\r\n     */\r\n    protected getFilters(predicate: (it: TEntity) => boolean, ...parameters: any[]): IFilters {\r\n        return new Filters<TEntity>(predicate, ...parameters);\r\n    }\r\n\r\n    public getPredicateFn(predicate: (it: TEntity, ...param: any[]) => boolean, ...parameters: any[]): (element: TEntity) => boolean {\r\n        return (entity: TEntity) => {\r\n            return predicate.apply({}, [entity].concat(parameters));\r\n        };\r\n    }\r\n}\r\n\r\nexport default BaseRepository\r\n\r\n"]}