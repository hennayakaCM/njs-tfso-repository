{"version":3,"file":"baserepository.js","sourceRoot":"","sources":["../../src/repository/baserepository.ts"],"names":[],"mappings":";AAAA,0BAAkC,mBAAmB,CAAC,CAAA;AAYtD;IAaW,gBAAgB;QACnB,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;IAC7B,CAAC;IAEM,iBAAiB;QACpB,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;IAC7B,CAAC;IAEM,mBAAmB;QACtB,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;IAC7B,CAAC;IAED;;;;OAIG;IACO,UAAU,CAAC,SAAmC,EAAE,GAAG,UAAiB;QAC1E,MAAM,CAAC,IAAI,iBAAO,CAAU,SAAS,EAAE,GAAG,UAAU,CAAC,CAAC;IAC1D,CAAC;IAEM,cAAc,CAAC,SAAoD,EAAE,GAAG,UAAiB;QAC5F,MAAM,CAAC,CAAC,MAAe;YACnB,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE,EAAE,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;QAC5D,CAAC,CAAC;IACN,CAAC;AACL,CAAC;AAED;kBAAe,cAAc,CAAA","sourcesContent":["import { IFilters, Filters } from './filters/filters';\n\nexport interface IBaseRepository<TEntity, TEntityId> {\n    create(entity: TEntity): Promise<TEntity>\n\n    read(id: TEntityId): Promise<TEntity>\n    readAll(predicate: any, ...parameters: any[]): Promise<TEntity[]>\n\n    update(entity: TEntity): Promise<boolean>\n    delete(entity: TEntity): Promise<boolean>\n}\n\nabstract class BaseRepository<TEntity, TEntityId> implements IBaseRepository<TEntity, TEntityId>\n{\n    abstract read(id: TEntityId): Promise<TEntity>\n\n    // ((t) => t.gender == 'female' && t.age >= 16)({gender: 'female', age: 17})     => true\n    // ((t) => t.gender == 'female' && t.age >= 16).toString()                       => (t) => t.gender == \\'female\\' && t.age >= 16\n    abstract readAll(predicate: (it: TEntity, ...param: any[]) => boolean, ...parameters: any[]): Promise<TEntity[]>\n\n    abstract create(entity: TEntity): Promise<TEntity>\n    abstract update(entity: TEntity): Promise<boolean>\n    abstract delete(entity: TEntity): Promise<boolean>\n\n\n    public beginTransaction(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    public commitTransaction(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    public rollbackTransaction(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    /**\n     * returns a IFilters if the predicate is solvable, otherwise it throws an error\n     * @param predicate\n     * @param parameters\n     */\n    protected getFilters(predicate: (it: TEntity) => boolean, ...parameters: any[]): IFilters {\n        return new Filters<TEntity>(predicate, ...parameters);\n    }\n\n    public getPredicateFn(predicate: (it: TEntity, ...param: any[]) => boolean, ...parameters: any[]): (element: TEntity) => boolean {\n        return (entity: TEntity) => {\n            return predicate.apply({}, [entity].concat(parameters));\n        };\n    }\n}\n\nexport default BaseRepository\n\n"]}