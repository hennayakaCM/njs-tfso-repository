{"version":3,"file":"filtercriteria.js","sourceRoot":"","sources":["../../../src/repository/filters/filtercriteria.ts"],"names":[],"mappings":"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","sourcesContent":["import { IExpression, ExpressionType, ILogicalExpression, LogicalOperatorType, IMemberExpression, ILiteralExpression, IIdentifierExpression } from './../../expressions/expressionvisitor';\r\n\r\nexport interface IFilterCriteria {\r\n    property: string\r\n    operator: string\r\n    value: any\r\n\r\n    isValid: boolean\r\n}\r\n\r\nexport class FilterCriteria implements IFilterCriteria {\r\n    private _expression: ILogicalExpression;\r\n\r\n    constructor(expression: ILogicalExpression) {\r\n        this._expression = expression;\r\n    }\r\n\r\n    protected get expression() {\r\n        return this._expression;\r\n    }\r\n\r\n    public get property() {\r\n        switch (this._expression.left.type) {\r\n            case ExpressionType.Member:\r\n                return (<IIdentifierExpression>(<IMemberExpression>this._expression.left).property).name;\r\n\r\n            case ExpressionType.Literal:\r\n\r\n                switch (this._expression.right.type) {\r\n                    case ExpressionType.Member:\r\n                        return (<IIdentifierExpression>(<IMemberExpression>this._expression.right).property).name;\r\n\r\n                    default:\r\n                        return \"\";\r\n\r\n                }\r\n\r\n            default:\r\n                return \"\";\r\n        }\r\n    }\r\n\r\n    public get operator() {\r\n        switch (this._expression.left.type) {\r\n            case ExpressionType.Member:\r\n                switch (this._expression.operator) {\r\n                    case LogicalOperatorType.Equal:\r\n                        return \"==\";\r\n\r\n                    case LogicalOperatorType.NotEqual:\r\n                        return \"!=\";\r\n\r\n                    case LogicalOperatorType.Greater:\r\n                        return \">\";\r\n\r\n                    case LogicalOperatorType.GreaterOrEqual:\r\n                        return \">=\";\r\n\r\n                    case LogicalOperatorType.Lesser:\r\n                        return \"<\";\r\n\r\n                    case LogicalOperatorType.LesserOrEqual:\r\n                        return \"<=\";\r\n                }\r\n\r\n                return null;\r\n\r\n            case ExpressionType.Literal:\r\n                switch (this._expression.operator) {\r\n                    case LogicalOperatorType.Equal:\r\n                        return \"==\";\r\n\r\n                    case LogicalOperatorType.NotEqual:\r\n                        return \"!=\";\r\n\r\n                    case LogicalOperatorType.Greater:\r\n                        return \"<\";\r\n\r\n                    case LogicalOperatorType.GreaterOrEqual:\r\n                        return \"<=\";\r\n\r\n                    case LogicalOperatorType.Lesser:\r\n                        return \">\";\r\n\r\n                    case LogicalOperatorType.LesserOrEqual:\r\n                        return \">=\";\r\n                }\r\n\r\n                break;\r\n\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    public get value() {\r\n        switch (this._expression.left.type) {\r\n            case ExpressionType.Literal:\r\n                return (<ILiteralExpression>this._expression.left).value;\r\n\r\n            case ExpressionType.Member:\r\n\r\n                switch (this._expression.right.type) {\r\n                    case ExpressionType.Literal:\r\n                        return (<ILiteralExpression>this._expression.right).value;\r\n\r\n                    default:\r\n                        return null;\r\n                }\r\n\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    public get isValid() {\r\n        // requires \"member.property [comparison operator] literal\" for now\r\n\r\n        switch (this._expression.left.type) {\r\n            case ExpressionType.Member:\r\n\r\n                if ((<IMemberExpression>this._expression.left).object.type == ExpressionType.Identifier && (<IMemberExpression>this._expression.left).property.type == ExpressionType.Identifier) {\r\n\r\n                    switch (this._expression.right.type) {\r\n                        case ExpressionType.Literal:\r\n                            return true;\r\n\r\n                        default:\r\n                            return false;\r\n                    }\r\n\r\n                } else {\r\n                    return false;\r\n                }\r\n\r\n            case ExpressionType.Literal:\r\n\r\n                switch (this._expression.right.type) {\r\n                    case ExpressionType.Member:\r\n                        if ((<IMemberExpression>this._expression.right).object.type == ExpressionType.Identifier && (<IMemberExpression>this._expression.right).property.type == ExpressionType.Identifier)\r\n                            return true;\r\n                        else\r\n                            return false;\r\n\r\n                    default:\r\n                        return false;\r\n                }\r\n\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    public static visit(expression: ILogicalExpression): Array<IFilterCriteria> {\r\n        var result: Array<IFilterCriteria> = [];\r\n\r\n        switch (expression.operator) {\r\n            case LogicalOperatorType.Or:\r\n                return result;\r\n\r\n            case LogicalOperatorType.And:\r\n                if (expression.left.type == ExpressionType.Logical)\r\n                    result = result.concat(FilterCriteria.visit(<ILogicalExpression>expression.left));\r\n\r\n                if (expression.right.type == ExpressionType.Logical)\r\n                    result = result.concat(FilterCriteria.visit(<ILogicalExpression>expression.right));\r\n\r\n                break;\r\n\r\n            default:\r\n                result.push(new FilterCriteria(expression));\r\n                break;\r\n        }\r\n\r\n        return result.filter((criteria) => criteria.isValid);\r\n    }\r\n\r\n}"]}