{"version":3,"file":"repository_readall.js","sourceRoot":"","sources":["../../test/repository_readall.ts"],"names":[],"mappings":";AAAA,MAAO,MAAM,WAAW,QAAQ,CAAC,CAAC;AAClC,iCAAuB,oCAAoC,CAAC,CAAA;AAE5D,QAAQ,CAAC,mCAAmC,EAAE;IAC1C,IAAI,UAAyB,CAAC;IAE9B,UAAU,CAAC;QACP,UAAU,GAAG,IAAI,aAAa,EAAE,CAAC;IACrC,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,2CAA2C,EAAE;QAC5C,IAAI,IAAI,GAAG,UAAU,CAAC,aAAa,CAAC,CAAC,GAAS,KAAK,GAAG,CAAC,gBAAgB,IAAI,IAAI,IAAI,GAAG,CAAC,QAAQ,IAAI,IAAI,IAAI,GAAG,CAAC,gBAAgB,GAAG,IAAI,IAAI,GAAG,CAAC,EAAE,IAAI,IAAI,IAAI,CAAC,GAAG,CAAC,gBAAgB,GAAG,IAAI,IAAI,GAAG,CAAC,gBAAgB,IAAI,IAAI,CAAC,CAAC,CAAA;QAE1N,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,IAAI,CAAC,EAAE,sBAAsB,CAAC,CAAA;QAC1D,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,IAAI,CAAC,EAAE,wCAAwC,CAAC,CAAC;QACzF,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,IAAI,CAAC,EAAE,2CAA2C,CAAC,CAAC;IAChG,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,+BAA+B,EAAE;QAChC,IAAI,IAAI,GAAG,UAAU,CAAC,aAAa,CAAC,CAAC,GAAS,KAAK,GAAG,CAAC,QAAQ,IAAI,WAAW,CAAC,CAAC;QAEhF,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,IAAI,CAAC,EAAE,0BAA0B,CAAC,CAAC;QAC/D,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,IAAI,CAAC,EAAE,uBAAuB,CAAC,CAAC;IAC5E,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,iDAAiD,EAAE;QAClD,IAAI,IAAI,GAAG,UAAU,CAAC,aAAa,CAAC,CAAC,GAAS,KAAK,GAAG,CAAC,gBAAgB,GAAG,IAAI,IAAI,GAAG,CAAC,QAAQ,IAAI,WAAW,CAAC,CAAC;QAE/G,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,IAAI,CAAC,EAAE,0BAA0B,CAAC,CAAC;QAC/D,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,IAAI,CAAC,EAAE,uBAAuB,CAAC,CAAC;IAC5E,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,oDAAoD,EAAE;QACrD,IAAI,IAAI,GAAG,UAAU,CAAC,aAAa,CAAC,CAAC,GAAS,KAAK,GAAG,CAAC,gBAAgB,GAAG,IAAI,IAAI,GAAG,CAAC,QAAQ,IAAI,WAAW,CAAC,CAAC;QAE/G,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,IAAI,CAAC,EAAE,sBAAsB,CAAC,CAAC;QAC3D,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,IAAI,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,IAAI,CAAC,EAAE,sCAAsC,CAAC,CAAC;IAClI,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,2DAA2D,EAAE;QAC5D,IAAI,IAAI,GAAG,UAAU,CAAC,aAAa,CAAC,CAAC,GAAS,KAAK,GAAG,CAAC,QAAQ,IAAI,IAAI,CAAC,CAAC;QAEzE,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,IAAI,CAAC,EAAE,0BAA0B,CAAC,CAAA;QAC9D,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,IAAI,CAAC,EAAE,4BAA4B,CAAC,CAAC;QAC7E,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,IAAI,UAAU,EAAE,oCAAoC,CAAC,CAAC;QACnG,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,IAAI,IAAI,EAAE,2BAA2B,CAAC,CAAC;IACrF,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,kEAAkE,EAAE;QACnE,IAAI,IAAI,GAAG,UAAU,CAAC,aAAa,CAAC,CAAC,GAAS,KAAK,GAAG,CAAC,gBAAgB,GAAG,IAAI,CAAC,CAAC;QAEhF,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,IAAI,CAAC,EAAE,0BAA0B,CAAC,CAAA;QAC9D,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,IAAI,CAAC,EAAE,4BAA4B,CAAC,CAAC;QAC7E,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,IAAI,kBAAkB,EAAE,4CAA4C,CAAC,CAAC;QACnH,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,IAAI,IAAI,EAAE,2BAA2B,CAAC,CAAC;QACjF,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,IAAI,GAAG,EAAE,sCAAsC,CAAC,CAAC;IAClG,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,4FAA4F,EAAE;QAC7F,IAAI,IAAI,GAAG,UAAU,CAAC,aAAa,CAAC,CAAC,GAAS,KAAK,IAAI,GAAG,GAAG,CAAC,gBAAgB,CAAC,CAAC;QAEhF,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,IAAI,CAAC,EAAE,0BAA0B,CAAC,CAAA;QAC9D,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,IAAI,CAAC,EAAE,4BAA4B,CAAC,CAAC;QAC7E,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,IAAI,kBAAkB,EAAE,4CAA4C,CAAC,CAAC;QACnH,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,IAAI,IAAI,EAAE,2BAA2B,CAAC,CAAC;QACjF,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,IAAI,GAAG,EAAE,sCAAsC,CAAC,CAAC;IAClG,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,6DAA6D,EAAE;QAC9D,MAAM,CAAC,MAAM,CACT;YACI,UAAU,CAAC,aAAa,CAAC,CAAC,GAAS,KAAK,IAAI,CAAC,OAAO,IAAI,CAAC,CAAC,CAAC;QAC/D,CAAC,EACD,KAAK,CACR,CAAC;IACN,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,uDAAuD,EAAE;QAExD,IAAI,IAAI,GAAG,UAAU,CAAC,aAAa,CAAC,CAAC,GAAS,KAAK,CAAC,GAAG,CAAC,gBAAgB,IAAI,IAAI,IAAI,GAAG,CAAC,QAAQ,IAAI,IAAI,CAAC,IAAI,GAAG,CAAC,gBAAgB,IAAI,IAAI,IAAI,CAAC,GAAG,CAAC,QAAQ,IAAI,IAAI,IAAI,GAAG,CAAC,gBAAgB,IAAI,IAAI,CAAC,CAAC,CAAC;QACrM,IAAI,YAAY,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;QAE1C,MAAM,CAAC,EAAE,CAAC,YAAY,CAAC,MAAM,IAAI,CAAC,EAAE,yCAAyC,CAAC,CAAC;QAC/E,MAAM,CAAC,EAAE,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,QAAQ,IAAI,kBAAkB,EAAE,4CAA4C,CAAC,CAAC;IAC5G,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,0DAA0D,EAAE;QAE3D,IAAI,IAAI,GAAG,UAAU,CAAC,aAAa,CAAC,CAAC,GAAS,KAAK,CAAC,GAAG,CAAC,gBAAgB,GAAG,IAAI,IAAI,GAAG,CAAC,QAAQ,IAAI,IAAI,CAAC,IAAI,GAAG,CAAC,gBAAgB,IAAI,IAAI,IAAI,CAAC,GAAG,CAAC,QAAQ,IAAI,IAAI,IAAI,GAAG,CAAC,gBAAgB,IAAI,IAAI,CAAC,CAAC,CAAC;QACpM,IAAI,YAAY,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;QAE1C,MAAM,CAAC,EAAE,CAAC,YAAY,CAAC,MAAM,IAAI,CAAC,EAAE,0CAA0C,CAAC,CAAC;IACpF,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,4BAA4B,EAAE;QAE7B,IAAI,IAAI,GAAG,UAAU,CAAC,aAAa,CAAC,CAAC,GAAS,KAAK,GAAG,CAAC,QAAQ,CAAC,WAAW,EAAE,IAAI,IAAI,CAAC,CAAC;QAEvF,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,IAAI,CAAC,EAAE,0BAA0B,CAAC,CAAC;QAC/D,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,IAAI,CAAC,EAAE,4BAA4B,CAAC,CAAC;IACjF,CAAC,CAAC,CAAA;AACN,CAAC,CAAC,CAAC;AAWH,4BAA4B,wBAAU;IAElC;QACI,OAAO,CAAC;IACZ,CAAC;IAEM,IAAI,CAAC,EAAE;QACV,MAAM,CAAC,OAAO,CAAC,MAAM,CAAO,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAAC;IAC9D,CAAC;IAEM,OAAO,CAAC,SAAS;QACpB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAS,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAAC;IAChE,CAAC;IAEM,MAAM,CAAC,MAAM;QAChB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAU,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAAC;IACjE,CAAC;IAEM,MAAM,CAAC,MAAM;QAChB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAU,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAAC;IACjE,CAAC;IAEM,MAAM,CAAC,MAAY;QACtB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAO,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAAC;IAC9D,CAAC;IAEM,aAAa,CAAC,SAAiC,EAAE,UAAmB;QACvE,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;IACnD,CAAC;AACL,CAAC;AAAA","sourcesContent":["import assert = require('assert');\r\nimport Repository from './../src/repository/baserepository';\r\n\r\ndescribe(\"When using repository to read all\", () => {\r\n    var repository: CarRepository;\r\n\r\n    beforeEach(() => {\r\n        repository = new CarRepository();\r\n    })\r\n\r\n    it(\"should handle multiple or/and expressions\", () => {\r\n        var list = repository.exposeFilters((car: ICar) => car.registrationYear >= 2016 || car.location == 'NO' && car.registrationYear > 2000 && car.id != null && (car.registrationYear > 2000 || car.registrationYear == 1999))\r\n\r\n        assert.ok(list.groups.length == 2, \"Expected two filters\")\r\n        assert.ok(list.groups[0].criteria.length == 1, \"Expected one criteria for first filter\");\r\n        assert.ok(list.groups[1].criteria.length == 3, \"Expected three criteria for second filter\");\r\n    })\r\n\r\n    it(\"should return a single filter\", () => {\r\n        var list = repository.exposeFilters((car: ICar) => car.location == 'PORSGRUNN');\r\n\r\n        assert.ok(list.groups.length == 1, \"Expected a single filter\");\r\n        assert.ok(list.groups[0].criteria.length == 1, \"Expected one criteria\");\r\n    })\r\n\r\n    it(\"should return a single filter with two criteria\", () => {\r\n        var list = repository.exposeFilters((car: ICar) => car.registrationYear > 2015 && car.location == 'PORSGRUNN');\r\n\r\n        assert.ok(list.groups.length == 1, \"Expected a single filter\");\r\n        assert.ok(list.groups[0].criteria.length == 2, \"Expected two criteria\");\r\n    })\r\n\r\n    it(\"should return a two filters with one criteria each\", () => {\r\n        var list = repository.exposeFilters((car: ICar) => car.registrationYear > 2015 || car.location == 'PORSGRUNN');\r\n\r\n        assert.ok(list.groups.length == 2, \"Expected two filters\");\r\n        assert.ok(list.groups[0].criteria.length == 1 && list.groups[1].criteria.length == 1, \"Expected one criteria in each filter\");\r\n    })\r\n\r\n    it(\"should return a criteria using property to be equal value\", () => {\r\n        var list = repository.exposeFilters((car: ICar) => car.location == 'NO');\r\n\r\n        assert.ok(list.groups.length == 1, \"Expected a single filter\")\r\n        assert.ok(list.groups[0].criteria.length == 1, \"Expected a single criteria\");\r\n        assert.ok(list.groups[0].criteria[0].property == \"location\", \"Expected property to be 'location'\");\r\n        assert.ok(list.groups[0].criteria[0].value == \"NO\", \"Expected value to be 'NO'\");\r\n    })\r\n\r\n    it(\"should return a criteria using property to be greater than value\", () => {\r\n        var list = repository.exposeFilters((car: ICar) => car.registrationYear > 2000);\r\n\r\n        assert.ok(list.groups.length == 1, \"Expected a single filter\")\r\n        assert.ok(list.groups[0].criteria.length == 1, \"Expected a single criteria\");\r\n        assert.ok(list.groups[0].criteria[0].property == \"registrationYear\", \"Expected property to be 'registrationYear'\");\r\n        assert.ok(list.groups[0].criteria[0].value == 2000, \"Expected value to be 2000\");\r\n        assert.ok(list.groups[0].criteria[0].operator == \">\", \"Expected operator to be greater than\");\r\n    })\r\n\r\n    it(\"should return a criteria using property to be greater than value just the other way around\", () => {\r\n        var list = repository.exposeFilters((car: ICar) => 2000 < car.registrationYear);\r\n\r\n        assert.ok(list.groups.length == 1, \"Expected a single filter\")\r\n        assert.ok(list.groups[0].criteria.length == 1, \"Expected a single criteria\");\r\n        assert.ok(list.groups[0].criteria[0].property == \"registrationYear\", \"Expected property to be 'registrationYear'\");\r\n        assert.ok(list.groups[0].criteria[0].value == 2000, \"Expected value to be 2000\");\r\n        assert.ok(list.groups[0].criteria[0].operator == \">\", \"Expected operator to be greater than\");\r\n    })\r\n\r\n    it(\"should cast an exception if a unsolvable expression is used\", () => {\r\n        assert.throws(\r\n            () => {\r\n                repository.exposeFilters((car: ICar) => this.unknown == 5);\r\n            },\r\n            Error\r\n        );\r\n    })\r\n\r\n    it(\"should intersection filter properties that is common \", () => {\r\n\r\n        var list = repository.exposeFilters((car: ICar) => (car.registrationYear == 2015 && car.location == 'NO') || car.registrationYear == 2015 || (car.location == 'SE' && car.registrationYear == 2015));\r\n        var intersection = list.getIntersection();\r\n\r\n        assert.ok(intersection.length == 1, \"Expected one criteria from intersection\");\r\n        assert.ok(intersection[0].property == \"registrationYear\", \"Expected property to be 'registrationYear'\");\r\n    })\r\n\r\n    it(\"should intersection filter properties that is not common\", () => {\r\n\r\n        var list = repository.exposeFilters((car: ICar) => (car.registrationYear > 2015 && car.location == 'NO') || car.registrationYear == 2015 || (car.location == 'SE' && car.registrationYear == 2015));\r\n        var intersection = list.getIntersection();\r\n\r\n        assert.ok(intersection.length == 0, \"Expected zero criteria from intersection\");\r\n    })\r\n\r\n    it(\"should handle method calls\", () => {\r\n\r\n        var list = repository.exposeFilters((car: ICar) => car.location.toLowerCase() == \"no\");\r\n\r\n        assert.ok(list.groups.length == 1, \"Expected a single filter\");\r\n        assert.ok(list.groups[0].criteria.length == 1, \"Expected a single criteria\");\r\n    })\r\n});\r\n\r\n\r\ninterface ICar {\r\n\r\n    id: number\r\n    location: string\r\n\r\n    registrationYear: number\r\n}\r\n\r\nclass CarRepository extends Repository<ICar, number>\r\n{\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    public read(id) {\r\n        return Promise.reject<ICar>(new Error('Not implemented'));\r\n    }\r\n\r\n    public readAll(predicate) {\r\n        return Promise.reject<ICar[]>(new Error('Not implemented'));\r\n    }\r\n\r\n    public delete(entity) {\r\n        return Promise.reject<boolean>(new Error('Not implemented'));\r\n    }\r\n\r\n    public update(entity) {\r\n        return Promise.reject<boolean>(new Error('Not implemented'));\r\n    }\r\n\r\n    public create(entity: ICar) {\r\n        return Promise.reject<ICar>(new Error('Not implemented'));\r\n    }\r\n\r\n    public exposeFilters(predicate: (car: ICar) => boolean, parameters?: Object) {\r\n        return super.getFilters(predicate, parameters);\r\n    }\r\n}"]}