{"version":3,"file":"query.js","sourceRoot":"","sources":["../../../../lib/repository/db/query.ts"],"names":[],"mappings":";AAUA;IAUI,YAAY,SAAwC;QAL5C,gBAAW,GAAqB,EAAE,CAAC;QAMvC,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC5B,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;IACzB,CAAC;IAED,IAAW,SAAS,CAAC,KAAmC;QACpD,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;IAC5B,CAAC;IAED,IAAW,SAAS;QAChB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC;YACxB,MAAM,CAAC,CAAC,MAAM,KAAK,IAAI,CAAC;QAE5B,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;IAC3B,CAAC;IAKD,IAAc,WAAW,CAAC,KAAa;QACnC,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;IAC9B,CAAC;IAED,IAAc,WAAW;QACrB,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;IAC7B,CAAC;IAED,IAAc,UAAU;QACpB,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;IAC5B,CAAC;IAQO,OAAO;QACX,IAAI,OAAO,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAEzB,MAAM,CAAC,IAAI,CAAC,YAAY,EAAE;aACrB,IAAI,CAAC,CAAC,SAAS;YACZ,EAAE,CAAC,CAAC,SAAS,CAAC,aAAa,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,aAAa,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,OAAO,CAAC,GAAG,IAAI,CAAC,CAAC;gBAClG,OAAO,CAAC,IAAI,CAAC,kCAAkC,CAAC,SAAS,CAAC,aAAa,GAAG,CAAC,GAAG,SAAS,CAAC,aAAa,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,OAAO,CAAC,gDAAgD,SAAS,CAAC,MAAM,aAAa,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;YAElO,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC;gBAClB,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;YAEtC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;QACvC,CAAC,EAAE,CAAC,GAAG;YACH,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;gBACjB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAE/B,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;QAChC,CAAC,CAAC,CAAA;IACV,CAAC;IAEM,IAAI,CAAI,WAAgE,EAAE,UAAiD;QAC9H,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC;YACrB,MAAM,IAAI,KAAK,CAAC,oEAAoE,CAAC,CAAC;QAE1F,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QAEpB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAE7B,MAAM,CAAC,IAAI,CAAC,OAAO,EAAK,CAAC;IAC7B,CAAC;IAEM,KAAK,CAAI,UAAiD;QAC7D,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC;YACrB,MAAM,IAAI,KAAK,CAAC,oEAAoE,CAAC,CAAC;QAE1F,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAE7B,MAAM,CAAC,IAAI,CAAC,OAAO,EAAK,CAAA;IAC5B,CAAC;AACL,CAAC;AAvFqB,aAAK,QAuF1B,CAAA;AAEoB","sourcesContent":["import { IRecordSet } from './recordset';\r\n\r\nexport interface IInputParameters {\n    [name: string]: {\n        name: string\n        type: any\n        value: any\n    }\n}\r\n\r\nexport abstract class Query<TEntity> implements PromiseLike<IRecordSet<TEntity>> {\r\n\r\n    protected onFulfilled: (value: IRecordSet<TEntity>) => any | PromiseLike<any>;\r\n    protected onRejected: (error: any) => any | PromiseLike<any>;\r\n\r\n    private _parameters: IInputParameters = {};\r\n    private _predicate: (entity: TEntity) => boolean;\r\n    private _commandText: string;\r\n    private _hasRun: boolean;\r\n\r\n    constructor(predicate?: (entity: TEntity) => boolean) {\r\n        this._predicate = predicate;\r\n        this._hasRun = false;\r\n    }\r\n\r\n    public set predicate(value: (entity: TEntity) => boolean) {\r\n        this._predicate = value;\r\n    }\r\n\r\n    public get predicate(): (entity: TEntity) => boolean {\r\n        if (this._predicate == null)\r\n            return (entity) => true;\r\n\r\n        return this._predicate;\r\n    }\r\n\r\n    protected abstract input(name: string, value: any): void\n    protected abstract input(name: string, type: any, value: any): void\n\r\n    protected set commandText(query: string) {\r\n        this._commandText = query;\r\n    }\r\n\r\n    protected get commandText(): string {\r\n        return this._commandText;\r\n    }\r\n\r\n    protected get parameters(): IInputParameters {\r\n        return this._parameters;\r\n    }\r\n    /**\r\n         * Execute the query with the values provided in parameters and commandText and returns\r\n         * a promise as a IRecordset of TEntity\r\n         * @return A promise of the fulfilled IRecordSet<TEntity>\r\n         */\r\n    protected abstract executeQuery(): Promise<IRecordSet<TEntity>>\r\n\r\n    private execute<U>(): Promise<U> {\r\n        var stamped = Date.now();\r\n\r\n        return this.executeQuery()\r\n            .then((recordset) => {\r\n                if (recordset.executionTime > 1000 || (recordset.executionTime == 0 && (Date.now() - stamped) > 1000))\r\n                    console.warn(`[WARNING]: Long running query (${(recordset.executionTime > 0 ? recordset.executionTime : Date.now() - stamped)}ms). Consider narrow down the result length (${recordset.length}pcs);\\n   ${this.commandText}`);\r\n\r\n                if (!this.onFulfilled)\r\n                    return Promise.resolve(recordset);\r\n\r\n                return this.onFulfilled(recordset);\r\n            }, (err) => {\r\n                if (!this.onRejected)\r\n                    return Promise.reject(err);\r\n\r\n                return this.onRejected(err);\r\n            })\r\n    }\r\n\r\n    public then<U>(onFulfilled?: (value: IRecordSet<TEntity>) => U | PromiseLike<U>, onRejected?: (error: Error) => U | PromiseLike<U>): Promise<U> {\r\n        if (this._hasRun == true)\r\n            throw new Error('Query is not thread safe currently, please dispose Query after use');\r\n\r\n        this._hasRun = true;\r\n\r\n        this.onFulfilled = onFulfilled;\r\n        this.onRejected = onRejected;\r\n\r\n        return this.execute<U>();\r\n    }\r\n\r\n    public catch<U>(onRejected?: (error: Error) => U | PromiseLike<U>): Promise<U> {\r\n        if (this._hasRun == true)\r\n            throw new Error('Query is not thread safe currently, please dispose Query after use');\r\n\r\n        this.onRejected = onRejected;\r\n\r\n        return this.execute<U>()\r\n    }\r\n}\r\n\r\nexport { IRecordSet }"]}