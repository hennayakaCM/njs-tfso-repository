{"version":3,"file":"binaryexpression.js","sourceRoot":"","sources":["../../../lib/expressions/binaryexpression.ts"],"names":[],"mappings":";AAAA,6BAAwD,cAAc,CAAC,CAAA;AAEvE,WAAY,kBAAkB;IAC1B,yEAAW,CAAA;IACX,mEAAQ,CAAA;IACR,mEAAQ,CAAA;IACR,+EAAc,CAAA;IAEd,iEAAO,CAAA;IACP,yDAAG,CAAA;IACH,uDAAE,CAAA;IACF,yEAAW,CAAA;IACX,qEAAS,CAAA;IACT,uEAAU,CAAA;AACd,CAAC,EAZW,0BAAkB,KAAlB,0BAAkB,QAY7B;AAZD,IAAY,kBAAkB,GAAlB,0BAYX,CAAA;AAQD,+BAAsC,uBAAU;IAC5C,YAAmB,QAA4B,EAAS,IAAiB,EAAS,KAAkB;QAChG,MAAM,2BAAc,CAAC,MAAM,CAAC,CAAC;QADd,aAAQ,GAAR,QAAQ,CAAoB;QAAS,SAAI,GAAJ,IAAI,CAAa;QAAS,UAAK,GAAL,KAAK,CAAa;IAEpG,CAAC;AACL,CAAC;AAJY,wBAAgB,mBAI5B,CAAA","sourcesContent":["import { IExpression, Expression, ExpressionType } from './expression';\r\n\r\nexport enum BinaryOperatorType {\r\n    Subtraction,\r\n    Addition,\r\n    Division,\r\n    Multiplication,\r\n\r\n    Modulus,        // %\r\n    And,            // &\r\n    Or,             // |\r\n    ExclusiveOr,    // ^\r\n    LeftShift,      // <<\r\n    RightShift,     // >>\r\n}\r\n\r\nexport interface IBinaryExpression extends IExpression {\r\n    operator: BinaryOperatorType\r\n    left: IExpression\r\n    right: IExpression\r\n}\r\n\r\nexport class BinaryExpression extends Expression implements IBinaryExpression {\r\n    constructor(public operator: BinaryOperatorType, public left: IExpression, public right: IExpression) {\r\n        super(ExpressionType.Binary);\r\n    }\r\n}"]}